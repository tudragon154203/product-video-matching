services:
  # Infrastructure Services
  postgres:
    image: pgvector/pgvector:pg17
    env_file:
      - .env
    ports:
      - "${PORT_POSTGRES_HOST}:5432"
    volumes:
      - ../../${DATA_ROOT_HOST}/postgres_data:/var/lib/postgresql/data
      # - postgres_data:/var/lib/postgresql/data
      - ../../infra/init_db:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgweb:
    image: sosedoff/pgweb:latest
    env_file:
      - .env
    container_name: postgres-webui
    restart: unless-stopped
    ports:
      - "${PORT_POSTGRES_UI}:8081"
    environment:
      PGWEB_DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms && rabbitmq-diagnostics -q check_port_connectivity",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2
    env_file: .env
    ports:
      - "${PORT_REDIS}:6379"
    restart: unless-stopped
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-insight:
    image: redis/redisinsight:latest
    env_file: .env
    ports:
      - "${PORT_REDIS_UI}:5540"
    depends_on:
      - redis
    volumes:
      - redis_insight_data:/data
    restart: unless-stopped

  # Application Services
  main-api:
    build:
      context: ../../
      dockerfile: services/main-api/Dockerfile
    env_file:
      - .env # Shared environment variables
    environment:
      PYTHONPATH: /app/libs:/app/libs/common-py:/app/libs/contracts
      PUBLIC_IMAGE_BASE_URL: ${PUBLIC_IMAGE_BASE_URL}
    ports:
      - "${PORT_MAIN}:8000"
    volumes:
      - ../../libs:/app/libs:ro
      - ../../infra:/app/infra:ro
      - ../../${DATA_ROOT_HOST}:${DATA_ROOT_CONTAINER}
      - ../../services/main-api:/app
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    command:
      [
        "python",
        "-m",
        "uvicorn",
        "main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
      ]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  front-end:
    build:
      context: ../../services/front-end
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      # Use host-exposed URL so the browser can reach the API
      NEXT_PUBLIC_API_BASE_URL: http://localhost:${PORT_MAIN}
    ports:
      - "${PORT_UI}:3000"
    volumes:
      - ../../services/front-end:/app
      - node_modules:/app/node_modules
    depends_on:
      main-api:
        condition: service_healthy
    restart: unless-stopped
    # Install only when lockfile changes or node_modules is empty
    command:
      - sh
      - -c
      - |
        H=$(sha256sum package-lock.json | awk "{print $1}");
        if [ ! -d node_modules ] || [ -z "$(ls -A node_modules 2>/dev/null)" ] || [ ! -f node_modules/.lockhash ] || [ "$(cat node_modules/.lockhash 2>/dev/null)" != "$$H" ]; then
          echo "[front-end] Installing deps (hash $$H)";
          rm -rf node_modules;
          npm ci --no-audit --no-fund;
          echo "$$H" > node_modules/.lockhash;
        else
          echo "[front-end] Reusing cached node_modules (hash $$H)";
        fi
        npm run dev

  dropship-product-finder:
    build:
      context: ../../
      dockerfile: services/dropship-product-finder/Dockerfile
    env_file:
      - .env
    environment:
      PYTHONPATH: /app/libs:/app/libs/common-py:/app/libs/contracts
    volumes:
      - ../../libs:/app/libs:ro
      - ../../${DATA_ROOT_HOST}:${DATA_ROOT_CONTAINER}
      - ../../services/dropship-product-finder:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "app/main.py"]

  video-crawler:
    build:
      context: ../../
      dockerfile: services/video-crawler/Dockerfile
    env_file:
      - .env
    environment:
      PYTHONPATH: /app/libs:/app/libs/common-py:/app/libs/contracts::/app/libs/vision-common
    volumes:
      - ../../libs:/app/libs:ro
      - ../../${DATA_ROOT_HOST}:${DATA_ROOT_CONTAINER}
      - ../../services/video-crawler:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    command: ["/bin/bash", "-c", "/app/update_yt_dlp.sh && python app/main.py"]

  product-segmentor:
    build:
      context: ../../
      dockerfile: services/product-segmentor/Dockerfile
    env_file:
      - .env
    environment:
      PYTHONPATH: /app/libs:/app/libs/common-py:/app/libs/contracts:/app/libs/vision-common
      TRANSFORMERS_TRUST_REMOTE_CODE: 1
      HF_HUB_ENABLE_HF_TRANSFER: 1
    volumes:
      - ../../libs:/app/libs:ro
      - ../../${DATA_ROOT_HOST}:${DATA_ROOT_CONTAINER}
      - ../../services/product-segmentor:/app/app
      - ../../${MODEL_CACHE}:/root/.cache/huggingface
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "app/main.py"]
  vision-embedding:
    build:
      context: ../../
      dockerfile: services/vision-embedding/Dockerfile
    env_file:
      - .env
    environment:
      PYTHONPATH: /app/libs:/app/libs/common-py:/app/libs/contracts:/app/libs/vision-common
    volumes:
      - ../../libs:/app/libs:ro
      - ../../${DATA_ROOT_HOST}:${DATA_ROOT_CONTAINER}
      - ../../services/vision-embedding:/app/app
      - ../../${MODEL_CACHE}:/root/.cache/huggingface
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      product-segmentor:
        condition: service_started
    restart: unless-stopped
    command: ["python", "app/main.py"]
  vision-keypoint:
    build:
      context: ../../
      dockerfile: services/vision-keypoint/Dockerfile
    env_file:
      - .env
    environment:
      PYTHONPATH: /app/libs:/app/libs/common-py:/app/libs/contracts:/app/libs/vision-common
    volumes:
      - ../../libs:/app/libs:ro
      - ../../${DATA_ROOT_HOST}:${DATA_ROOT_CONTAINER}
      - ../../services/vision-keypoint:/app/app
      - ../../${MODEL_CACHE}:/root/.cache/huggingface
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      product-segmentor:
        condition: service_started
    restart: unless-stopped
    command: ["python", "app/main.py"]

  matcher:
    build:
      context: ../../
      dockerfile: services/matcher/Dockerfile
    env_file:
      - .env
    environment:
      PYTHONPATH: /app/libs:/app/libs/common-py:/app/libs/contracts
    volumes:
      - ../../libs:/app/libs:ro
      - ../../${DATA_ROOT_HOST}:${DATA_ROOT_CONTAINER}
      - ../../services/matcher:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "app/main.py"]

  evidence-builder:
    build:
      context: ../../
      dockerfile: services/evidence-builder/Dockerfile
    env_file:
      - .env
    environment:
      PYTHONPATH: /app/libs:/app/libs/common-py:/app/libs/contracts
    volumes:
      - ../../libs:/app/libs:ro
      - ../../${DATA_ROOT_HOST}:${DATA_ROOT_CONTAINER}
      - ../../services/evidence-builder:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "app/main.py"]

volumes:
  # postgres_data:
  rabbitmq_data:
  redis_data:
  redis_insight_data:
  node_modules:

networks:
  default:
    name: product-video-matching
