services:
  # Infrastructure Services
  postgres:
    image: pgvector/pgvector:pg17
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../infra/migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgweb:
    image: sosedoff/pgweb:latest
    env_file:
      - .env
    container_name: postgres-webui
    restart: unless-stopped
    ports:
      - "${PORT_POSTGRES_UI}:8081"
    environment:
      PGWEB_DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application Services
  main-api:
    build:
      context: ../../
      dockerfile: services/main-api/Dockerfile
    env_file:
      - .env
    environment:
      PYTHONPATH: /app/libs:/app/libs/common-py:/app/libs/contracts
    ports:
      - "${PORT_MAIN}:8000"
    volumes:
      - ../../libs:/app/libs
      - ../../infra:/app/infra:ro
      - ../../data:/app/data
      - ../../services/main-api:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

  results-api:
    build:
      context: ../../
      dockerfile: services/results-api/Dockerfile
    env_file:
      - .env
    environment:
      DATA_ROOT: /app/data
      PYTHONPATH: /app/libs:/app/libs/common-py:/app/libs/contracts
    ports:
      - "${PORT_RESULTS}:8080"
    volumes:
      - ../../libs:/app/libs
      - ../../data:/app/data:ro
      - ../../services/results-api:/app/app
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8080"]

  catalog-collector:
    build:
      context: ../../
      dockerfile: services/catalog-collector/Dockerfile
    env_file:
      - .env
    environment:
      DATA_ROOT: /app/data
      PYTHONPATH: /app/libs:/app/libs/common-py:/app/libs/contracts
    volumes:
      - ../../libs:/app/libs
      - ../../data:/app/data
      - ../../services/catalog-collector:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "app/main.py"]

  media-ingestion:
    build:
      context: ../../
      dockerfile: services/media-ingestion/Dockerfile
    env_file:
      - .env
    environment:
      DATA_ROOT: /app/data
      PYTHONPATH: /app/libs:/app/libs/common-py:/app/libs/contracts
    volumes:
      - ../../libs:/app/libs
      - ../../data:/app/data
      - ../../services/media-ingestion:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "app/main.py"]

  vision-embedding:
    build:
      context: ../../
      dockerfile: services/vision-embedding/Dockerfile
    env_file:
      - .env
    environment:
      PYTHONPATH: /app/libs:/app/libs/common-py:/app/libs/contracts
    volumes:
      - ../../libs:/app/libs
      - ../../data:/app/data:ro
      - ../../services/vision-embedding:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "app/main.py"]
    # Uncomment for GPU support
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]

  vision-keypoint:
    build:
      context: ../../
      dockerfile: services/vision-keypoint/Dockerfile
    env_file:
      - .env
    environment:
      PYTHONPATH: /app/libs:/app/libs/common-py:/app/libs/contracts
    volumes:
      - ../../libs:/app/libs
      - ../../data:/app/data
      - ../../services/vision-keypoint:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "app/main.py"]

  vector-index:
    build:
      context: ../../
      dockerfile: services/vector-index/Dockerfile
    env_file:
      - .env
    environment:
      PYTHONPATH: /app/libs:/app/libs/common-py:/app/libs/contracts
    volumes:
      - ../../libs:/app/libs
      - ../../services/vector-index:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8081"]

  matcher:
    build:
      context: ../../
      dockerfile: services/matcher/Dockerfile
    env_file:
      - .env
    environment:
      DATA_ROOT: /app/data
      PYTHONPATH: /app/libs:/app/libs/common-py:/app/libs/contracts
    volumes:
      - ../../libs:/app/libs
      - ../../data:/app/data:ro
      - ../../services/matcher:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      vector-index:
        condition: service_started
    restart: unless-stopped
    command: ["python", "app/main.py"]

  evidence-builder:
    build:
      context: ../../
      dockerfile: services/evidence-builder/Dockerfile
    env_file:
      - .env
    environment:
      DATA_ROOT: /app/data
      PYTHONPATH: /app/libs:/app/libs/common-py:/app/libs/contracts
    volumes:
      - ../../libs:/app/libs
      - ../../data:/app/data
      - ../../services/evidence-builder:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "app/main.py"]

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  default:
    name: product-video-matching