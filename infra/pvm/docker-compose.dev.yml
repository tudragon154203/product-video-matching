services:
  # Infrastructure Services
  postgres:
    image: pgvector/pgvector:pg17
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../infra/migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgweb:
    image: sosedoff/pgweb:latest
    env_file:
      - .env
    container_name: pgweb
    restart: unless-stopped
    ports:
      - "${PORT_POSTGRES_UI}:8081"
    environment:
      PGWEB_DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application Services
  main-api:
    build:
      context: ../../
      dockerfile: services/main-api/Dockerfile
    env_file:
      - .env
    environment:
      POSTGRES_DSN: postgresql://postgres:dev@postgres:5432/product_video_matching
      BUS_BROKER: amqp://guest:guest@rabbitmq:5672/
      PYTHONPATH: /app/libs
    ports:
      - "${PORT_MAIN}:8000"
    volumes:
      - ../../libs:/app/libs:ro
      - ../../data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  results-api:
    build:
      context: ../../
      dockerfile: services/results-api/Dockerfile
    env_file:
      - .env
    environment:
      POSTGRES_DSN: postgresql://postgres:dev@postgres:5432/product_video_matching
      DATA_ROOT: /app/data
      PYTHONPATH: /app/libs
    ports:
      - "${PORT_RESULTS}:8080"
    volumes:
      - ../../libs:/app/libs:ro
      - ../../data:/app/data:ro
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  catalog-collector:
    build:
      context: ../../
      dockerfile: services/catalog-collector/Dockerfile
    environment:
      POSTGRES_DSN: postgresql://postgres:dev@postgres:5432/postgres
      BUS_BROKER: amqp://guest:guest@rabbitmq:5672/
      DATA_ROOT: /app/data
      PYTHONPATH: /app/libs
    volumes:
      - ../../libs:/app/libs:ro
      - ../../data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  media-ingestion:
    build:
      context: ../../
      dockerfile: services/media-ingestion/Dockerfile
    environment:
      POSTGRES_DSN: postgresql://postgres:dev@postgres:5432/postgres
      BUS_BROKER: amqp://guest:guest@rabbitmq:5672/
      DATA_ROOT: /app/data
      PYTHONPATH: /app/libs
    volumes:
      - ../../libs:/app/libs:ro
      - ../../data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  vision-embedding:
    build:
      context: ../../
      dockerfile: services/vision-embedding/Dockerfile
    environment:
      POSTGRES_DSN: postgresql://postgres:dev@postgres:5432/postgres
      BUS_BROKER: amqp://guest:guest@rabbitmq:5672/
      EMBED_MODEL: clip-vit-b32
      PYTHONPATH: /app/libs
    volumes:
      - ../../libs:/app/libs:ro
      - ../../data:/app/data:ro
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - capabilities: [gpu]

  vision-keypoint:
    build:
      context: ../../
      dockerfile: services/vision-keypoint/Dockerfile
    environment:
      POSTGRES_DSN: postgresql://postgres:dev@postgres:5432/postgres
      BUS_BROKER: amqp://guest:guest@rabbitmq:5672/
      DATA_ROOT: /app/data
      PYTHONPATH: /app/libs
    volumes:
      - ../../libs:/app/libs:ro
      - ../../data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  vector-index:
    build:
      context: ../../
      dockerfile: services/vector-index/Dockerfile
    env_file:
      - .env
    environment:
      POSTGRES_DSN: postgresql://postgres:dev@postgres:5432/product_video_matching
      BUS_BROKER: amqp://guest:guest@rabbitmq:5672/
      PYTHONPATH: /app/libs
    volumes:
      - ../../libs:/app/libs:ro
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  matcher:
    build:
      context: ../../
      dockerfile: services/matcher/Dockerfile
    env_file:
      - .env
    environment:
      POSTGRES_DSN: postgresql://postgres:dev@postgres:5432/product_video_matching
      BUS_BROKER: amqp://guest:guest@rabbitmq:5672/
      DATA_ROOT: /app/data
      RETRIEVAL_TOPK: 20
      SIM_DEEP_MIN: 0.82
      INLIERS_MIN: 0.35
      MATCH_BEST_MIN: 0.88
    volumes:
      - ../../libs:/app/libs:ro
      - ../../data:/app/data:ro
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      vector-index:
        condition: service_started
    restart: unless-stopped

  evidence-builder:
    build:
      context: ../../
      dockerfile: services/evidence-builder/Dockerfile
    environment:
      POSTGRES_DSN: postgresql://postgres:dev@postgres:5432/postgres
      BUS_BROKER: amqp://guest:guest@rabbitmq:5672/
      DATA_ROOT: /app/data
      PYTHONPATH: /app/libs
    volumes:
      - ../../libs:/app/libs:ro
      - ../../data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  default:
    name: product-video-matching